// lib/data/sample_data.dart
import 'package:firebase_auth/firebase_auth.dart';

import '../models/book_model.dart';
import '../models/resource_model.dart';
import '../models/reservation_model.dart';
import '../models/seat_model.dart';
import '../models/floor_model.dart';
import '../models/user_model.dart';

class SampleData {
  // Sample Books
  static List<Book> getBooks() {
    return [
      Book(
        id: 'book_1',
        title: 'Flutter in Action',
        author: 'Eric Windmill',
        coverUrl: 'https://m.media-amazon.com/images/I/41-3xT2oL8L._SX397_BO1,204,203,200_.jpg',
        description: 'A comprehensive guide to Flutter development, covering everything from the basics to advanced topics.',
        price: 39.99,
        categories: ['Programming', 'Mobile Development', 'Flutter'],
        publisher: 'Manning Publications',
        publishDate: DateTime(2020, 1, 7),
        isbn: '9781617296147',
        pageCount: 368,
        formats: ['paperback', 'ebook', 'audiobook'],
        formatPrices: {
          'paperback': 39.99,
          'ebook': 29.99,
          'audiobook': 24.99,
        },
        rating: 4.5,
        reviewCount: 120,
        isAvailable: true,
        isNew: false,
        isFeatured: true,
      ),
      Book(
        id: 'book_2',
        title: 'Dart in Action',
        author: 'Chris Buckett',
        coverUrl: 'https://m.media-amazon.com/images/I/41nN8t8C0yL._SX397_BO1,204,203,200_.jpg',
        description: 'A practical guide to the Dart programming language, with examples and best practices.',
        price: 34.99,
        categories: ['Programming', 'Dart'],
        publisher: 'Manning Publications',
        publishDate: DateTime(2013, 1, 31),
        isbn: '9781617290862',
        pageCount: 424,
        formats: ['paperback', 'ebook'],
        formatPrices: {
          'paperback': 34.99,
          'ebook': 24.99,
        },
        rating: 4.0,
        reviewCount: 85,
        isAvailable: true,
        isNew: false,
        isFeatured: false,
      ),
      Book(
        id: 'book_3',
        title: 'Programming Flutter',
        author: 'Carmine Zaccagnino',
        coverUrl: 'https://m.media-amazon.com/images/I/41RlTlmal9L._SX397_BO1,204,203,200_.jpg',
        description: 'Learn how to build beautiful, fast, native-quality apps with Flutter.',
        price: 44.99,
        categories: ['Programming', 'Mobile Development', 'Flutter'],
        publisher: 'Pragmatic Bookshelf',
        publishDate: DateTime(2020, 5, 15),
        isbn: '9781680506952',
        pageCount: 350,
        formats: ['paperback', 'ebook', 'audiobook'],
        formatPrices: {
          'paperback': 44.99,
          'ebook': 34.99,
          'audiobook': 29.99,
        },
        rating: 4.7,
        reviewCount: 95,
        isAvailable: true,
        isNew: true,
        isFeatured: true,
      ),
      Book(
        id: 'book_4',
        title: 'Flutter Cookbook',
        author: 'Simone Alessandria',
        coverUrl: 'https://m.media-amazon.com/images/I/41GbCGz5ftL._SX404_BO1,204,203,200_.jpg',
        description: 'Practical recipes for building cross-platform mobile applications with Flutter.',
        price: 49.99,
        categories: ['Programming', 'Mobile Development', 'Flutter'],
        publisher: 'Packt Publishing',
        publishDate: DateTime(2021, 3, 10),
        isbn: '9781838823382',
        pageCount: 510,
        formats: ['paperback', 'ebook'],
        formatPrices: {
          'paperback': 49.99,
          'ebook': 39.99,
        },
        rating: 4.3,
        reviewCount: 78,
        isAvailable: true,
        isNew: true,
        isFeatured: false,
      ),
      Book(
        id: 'book_5',
        title: 'Beginning Flutter',
        author: 'Marco L. Napoli',
        coverUrl: 'https://m.media-amazon.com/images/I/41RYvkJfgRL._SX348_BO1,204,203,200_.jpg',
        description: 'A hands-on guide to Flutter development for beginners.',
        price: 36.99,
        categories: ['Programming', 'Mobile Development', 'Flutter'],
        publisher: 'Wrox',
        publishDate: DateTime(2019, 11, 12),
        isbn: '9781119550822',
        pageCount: 384,
        formats: ['paperback', 'ebook'],
        formatPrices: {
          'paperback': 36.99,
          'ebook': 26.99,
        },
        rating: 4.1,
        reviewCount: 62,
        isAvailable: true,
        isNew: false,
        isFeatured: false,
      ),
      Book(
        id: 'book_6',
        title: 'Flutter for Beginners',
        author: 'Alessandro Biessek',
        coverUrl: 'https://m.media-amazon.com/images/I/51vJQwHZ7HL._SX404_BO1,204,203,200_.jpg',
        description: 'An introductory guide to building cross-platform mobile applications with Flutter.',
        price: 39.99,
        categories: ['Programming', 'Mobile Development', 'Flutter'],
        publisher: 'Packt Publishing',
        publishDate: DateTime(2019, 9, 30),
        isbn: '9781788996082',
        pageCount: 486,
        formats: ['paperback', 'ebook'],
        formatPrices: {
          'paperback': 39.99,
          'ebook': 29.99,
        },
        rating: 4.2,
        reviewCount: 55,
        isAvailable: true,
        isNew: false,
        isFeatured: false,
      ),
    ];
  }

  // Sample Resources
  static List<Resource> getResources() {
    return [
      Resource(
        id: 'res_1',
        title: 'Introduction to Flutter Development',
        description: 'A comprehensive guide to getting started with Flutter development.',
        type: 'article',
        url: 'https://example.com/flutter-intro',
        subject: 'Computer Science',
        author: 'John Doe',
        dateAdded: DateTime.now().subtract(const Duration(days: 2)),
        format: 'HTML',
        size: '2.3 MB',
        language: 'English',
        license: 'Creative Commons',
        previewImageUrl: 'https://storage.googleapis.com/cms-storage-bucket/6e19fee6b47b36ca613f.png',
        tags: ['Flutter', 'Mobile Development', 'Programming'],
        viewCount: 1250,
        downloadCount: 450,
        isPublic: true,
      ),
      Resource(
        id: 'res_2',
        title: 'Flutter State Management Tutorial',
        description: 'Learn how to manage state in Flutter applications using Riverpod.',
        type: 'video',
        url: 'https://example.com/flutter-state-management',
        subject: 'Computer Science',
        author: 'Jane Smith',
        dateAdded: DateTime.now().subtract(const Duration(days: 7)),
        format: 'MP4',
        size: '156 MB',
        language: 'English',
        license: 'Standard YouTube License',
        previewImageUrl: 'https://i.ytimg.com/vi/dQw4w9WgXcQ/maxresdefault.jpg',
        tags: ['Flutter', 'State Management', 'Riverpod'],
        viewCount: 3500,
        downloadCount: 0,
        isPublic: true,
      ),
      Resource(
        id: 'res_3',
        title: 'Mobile App Design Principles',
        description: 'Best practices for designing mobile applications with a focus on user experience.',
        type: 'document',
        url: 'https://example.com/mobile-design',
        subject: 'Design',
        author: 'Alex Johnson',
        dateAdded: DateTime.now().subtract(const Duration(days: 21)),
        format: 'PDF',
        size: '8.5 MB',
        language: 'English',
        license: 'All Rights Reserved',
        previewImageUrl: null,
        tags: ['Design', 'UX', 'Mobile'],
        viewCount: 980,
        downloadCount: 320,
        isPublic: true,
      ),
      Resource(
        id: 'res_4',
        title: 'Student Survey Results 2023',
        description: 'Dataset containing the results of the annual student satisfaction survey.',
        type: 'dataset',
        url: 'https://example.com/survey-results',
        subject: 'Statistics',
        author: 'University Research Team',
        dateAdded: DateTime.now().subtract(const Duration(days: 30)),
        format: 'CSV',
        size: '4.2 MB',
        language: 'English',
        license: 'Open Data Commons',
        previewImageUrl: null,
        tags: ['Survey', 'Statistics', 'Student Satisfaction'],
        viewCount: 450,
        downloadCount: 210,
        isPublic: true,
      ),
    ];
  }

  // Sample Reservations
  static List<Reservation> getReservations() {
    return [
      Reservation(
        id: 'res_1',
        userId: 'user_1',
        resourceId: 'seat_101',
        resourceType: 'seat',
        resourceName: 'Seat 101',
        startTime: DateTime.now().add(const Duration(hours: 1)),
        endTime: DateTime.now().add(const Duration(hours: 3)),
        status: ReservationStatus.confirmed,
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
      Reservation(
        id: 'res_2',
        userId: 'user_1',
        resourceId: 'room_3',
        resourceType: 'room',
        resourceName: 'Study Room 3',
        startTime: DateTime.now().subtract(const Duration(hours: 2)),
        endTime: DateTime.now().add(const Duration(hours: 1)),
        status: ReservationStatus.confirmed,
        createdAt: DateTime.now().subtract(const Duration(days: 2)),
      ),
      Reservation(
        id: 'res_3',
        userId: 'user_1',
        resourceId: 'book_1',
        resourceType: 'book',
        resourceName: 'Flutter in Action',
        startTime: DateTime.now().subtract(const Duration(days: 5)),
        endTime: DateTime.now().add(const Duration(days: 9)),
        status: ReservationStatus.confirmed,
        createdAt: DateTime.now().subtract(const Duration(days: 5)),
      ),
      Reservation(
        id: 'res_4',
        userId: 'user_1',
        resourceId: 'seat_205',
        resourceType: 'seat',
        resourceName: 'Seat 205',
        startTime: DateTime.now().subtract(const Duration(days: 2)),
        endTime: DateTime.now().subtract(const Duration(days: 2)).add(const Duration(hours: 4)),
        status: ReservationStatus.completed,
        createdAt: DateTime.now().subtract(const Duration(days: 3)),
      ),
      Reservation(
        id: 'res_5',
        userId: 'user_1',
        resourceId: 'room_5',
        resourceType: 'room',
        resourceName: 'Study Room 5',
        startTime: DateTime.now().add(const Duration(days: 2)),
        endTime: DateTime.now().add(const Duration(days: 2, hours: 2)),
        status: ReservationStatus.confirmed,
        createdAt: DateTime.now().subtract(const Duration(days: 1)),
      ),
    ];
  }

  // Sample Seats
  static List<Seat> getSeats() {
    return [
      Seat(
        id: 'seat_101',
        name: '101',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.individual,
        status: SeatStatus.available,
        amenities: ['power_outlet', 'usb_port'],
        capacity: 1,
        position: {'x': 100.0, 'y': 150.0},
      ),
      Seat(
        id: 'seat_102',
        name: '102',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.individual,
        status: SeatStatus.occupied,
        amenities: ['power_outlet'],
        capacity: 1,
        position: {'x': 150.0, 'y': 150.0},
      ),
      Seat(
        id: 'seat_103',
        name: '103',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.individual,
        status: SeatStatus.reserved,
        amenities: ['power_outlet', 'usb_port'],
        capacity: 1,
        position: {'x': 200.0, 'y': 150.0},
      ),
      Seat(
        id: 'seat_201',
        name: '201',
        floorId: 'floor_2',
        floorName: 'Second Floor',
        type: SeatType.quiet,
        status: SeatStatus.available,
        amenities: ['power_outlet', 'usb_port'],
        capacity: 1,
        position: {'x': 100.0, 'y': 100.0},
      ),
      Seat(
        id: 'seat_202',
        name: '202',
        floorId: 'floor_2',
        floorName: 'Second Floor',
        type: SeatType.quiet,
        status: SeatStatus.available,
        amenities: ['power_outlet'],
        capacity: 1,
        position: {'x': 150.0, 'y': 100.0},
      ),
      Seat(
        id: 'room_1',
        name: 'Room 1',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.group,
        status: SeatStatus.available,
        amenities: ['power_outlet', 'whiteboard', 'projector'],
        capacity: 6,
        position: {'x': 300.0, 'y': 200.0},
      ),
      Seat(
        id: 'room_2',
        name: 'Room 2',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.group,
        status: SeatStatus.occupied,
        amenities: ['power_outlet', 'whiteboard'],
        capacity: 4,
        position: {'x': 350.0, 'y': 200.0},
      ),
      Seat(
        id: 'pc_1',
        name: 'PC 1',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.computer,
        status: SeatStatus.available,
        amenities: ['power_outlet', 'desktop_computer', 'scanner'],
        capacity: 1,
        position: {'x': 100.0, 'y': 250.0},
      ),
      Seat(
        id: 'pc_2',
        name: 'PC 2',
        floorId: 'floor_1',
        floorName: 'First Floor',
        type: SeatType.computer,
        status: SeatStatus.maintenance,
        amenities: ['power_outlet', 'desktop_computer'],
        capacity: 1,
        position: {'x': 150.0, 'y': 250.0},
      ),
    ];
  }

  // Sample Floors
  static List<Floor> getFloors() {
    return [
      Floor(
        id: 'floor_1',
        name: 'First Floor',
        level: 1,
        mapImageUrl: 'https://via.placeholder.com/800x600?text=First+Floor+Map',
        features: ['quiet_zone', 'group_study', 'computers', 'help_desk'],
        dimensions: {'width': 800.0, 'height': 600.0},
        zones: [
          FloorZone(
            id: 'zone_1',
            name: 'Quiet Study Area',
            type: 'quiet',
            bounds: {'x': 50.0, 'y': 50.0, 'width': 200.0, 'height': 150.0},
            description: 'Silent study area for individual work',
            color: '#E3F2FD',
          ),
          FloorZone(
            id: 'zone_2',
            name: 'Group Study Rooms',
            type: 'group',
            bounds: {'x': 300.0, 'y': 50.0, 'width': 200.0, 'height': 150.0},
            description: 'Rooms for group collaboration',
            color: '#DCEDC8',
          ),
          FloorZone(
            id: 'zone_3',
            name: 'Computer Lab',
            type: 'computer',
            bounds: {'x': 50.0, 'y': 250.0, 'width': 200.0, 'height': 150.0},
            description: 'Computers available for student use',
            color: '#E1BEE7',
          ),
          FloorZone(
            id: 'zone_4',
            name: 'Help Desk',
            type: 'service',
            bounds: {'x': 300.0, 'y': 250.0, 'width': 200.0, 'height': 150.0},
            description: 'Get assistance from library staff',
            color: '#FFECB3',
          ),
        ],
        isAccessible: true,
      ),
      Floor(
        id: 'floor_2',
        name: 'Second Floor',
        level: 2,
        mapImageUrl: 'https://via.placeholder.com/800x600?text=Second+Floor+Map',
        features: ['quiet_zone', 'individual_study', 'book_stacks'],
        dimensions: {'width': 800.0, 'height': 600.0},
        zones: [
          FloorZone(
            id: 'zone_5',
            name: 'Silent Study Area',
            type: 'quiet',
            bounds: {'x': 50.0, 'y': 50.0, 'width': 300.0, 'height': 200.0},
            description: 'Completely silent study area',
            color: '#E3F2FD',
          ),
          FloorZone(
            id: 'zone_6',
            name: 'Book Stacks',
            type: 'stacks',
            bounds: {'x': 400.0, 'y': 50.0, 'width': 300.0, 'height': 500.0},
            description: 'Book collection',
            color: '#FFE0B2',
          ),
          FloorZone(
            id: 'zone_7',
            name: 'Individual Study Carrels',
            type: 'individual',
            bounds: {'x': 50.0, 'y': 300.0, 'width': 300.0, 'height': 250.0},
            description: 'Private study spaces',
            color: '#C8E6C9',
          ),
        ],
        isAccessible: true,
      ),
    ];
  }

  // Sample User
  static AppUser getUser() {
    return AppUser(
      id: 'user_1',
      name: 'John Doe',
      email: 'john.doe@example.com',
      profilePictureUrl: 'https://randomuser.me/api/portraits/men/1.jpg',
      studentId: 'S12345',
      department: 'Computer Science',
      role: 'student',
      memberSince: DateTime(2021, 9, 1),
      isVerified: true,
    );
  }
}